name: Build and Release GameTimeLimiter

on:
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发，如 v1.0.0
  workflow_dispatch:  # 允许手动触发
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '1.0.1'

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write      # Required for creating releases and uploading assets
      actions: read        # Required for downloading artifacts
      packages: read       # Required for package operations
      pull-requests: read  # Required for PR operations
      issues: read         # Required for issue operations
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Set UTF-8 encoding
      run: |
        # Set UTF-8 encoding for Python and console
        $env:PYTHONIOENCODING = "utf-8"
        $env:PYTHONLEGACYWINDOWSSTDIO = "utf-8"
        echo "PYTHONIOENCODING=utf-8" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "PYTHONLEGACYWINDOWSSTDIO=utf-8" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        # Set console to UTF-8
        chcp 65001
        
    - name: Install system dependencies
      run: |
        # Check if Visual C++ Redistributable is already available
        echo "Checking system for Visual C++ Redistributable..."
        Get-ChildItem "C:\Program Files*\Microsoft Visual Studio" -ErrorAction SilentlyContinue | Format-Table
        Get-ChildItem "C:\Windows\System32\msvcp*.dll" -ErrorAction SilentlyContinue | Format-Table
        echo "System dependencies check completed. GitHub Actions runners typically have required runtimes."
        
    - name: Install dependencies
      run: |
        echo "=== Starting dependency installation ==="
        
        echo "Upgrading pip..."
        python -m pip install --upgrade pip setuptools wheel
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to upgrade pip"
          exit 1
        }
        
        echo "Installing requirements..."
        pip install --no-cache-dir -r requirements.txt
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to install requirements"
          echo "=== Requirements file content ==="
          Get-Content requirements.txt
          echo "=== Pip debug info ==="
          pip --version
          pip config list
          exit 1
        }
        
        echo "Installing PyInstaller..."
        pip install pyinstaller
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to install PyInstaller"
          exit 1
        }
        
        echo "=== Verifying critical imports ==="
        try {
          python -c "import PyQt6; print('PyQt6 OK')"
          python -c "import psutil; print('psutil OK')"
          python -c "import qasync; print('qasync OK')"
          python -c "import openai; print('openai OK')"
          echo "All critical imports successful"
        } catch {
          Write-Error "Critical import failed: $_"
          echo "=== Installed packages ==="
          pip list
          exit 1
        }
        
    - name: Debug environment
      run: |
        echo "=== Environment Debug Info ==="
        echo "Python executable: $((Get-Command python).Source)"
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo "PyInstaller version: $(pyinstaller --version)"
        echo "Working directory: $(Get-Location)"
        echo "Directory contents:"
        Get-ChildItem | Format-Table Name, Length, LastWriteTime
        echo "=== Python packages ==="
        pip list | Select-String -Pattern "(PyQt6|psutil|pyinstaller|qasync|openai)"
        echo "=== System info ==="
        python -c "import platform; print(f'Platform: {platform.platform()}')"
        python -c "import sys; print(f'Python path: {sys.executable}')"
        echo "=== Memory and disk info ==="
        Get-WmiObject -Class Win32_ComputerSystem | Select-Object TotalPhysicalMemory
        Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, Size, FreeSpace
        
    # UPX compression disabled to avoid DLL loading issues and ensure compatibility
        
    - name: Get version from tag or input
      id: get_version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}".TrimStart("v")
        }
        echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "Version: $version"
        
    - name: Update version in code
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $versionParts = $version.Split('.')
        if ($versionParts.Length -ne 3) {
          Write-Error "Invalid version format: $version. Expected format: X.Y.Z"
          exit 1
        }
        $major = $versionParts[0]
        $minor = $versionParts[1]
        $patch = $versionParts[2]
        
        echo "Updating version to: $version (major: $major, minor: $minor, patch: $patch)"
        
        # Update version.py with better error handling
        try {
          $content = Get-Content "version.py" -Raw -Encoding UTF8
          $originalContent = $content
          
          # Debug: Show current version in file
          if ($content -match '__version__ = "([^"]*)"') {
            $currentVersion = $matches[1]
            echo "Current version in file: $currentVersion"
            if ($currentVersion -eq $version) {
              echo "WARNING: Target version ($version) is the same as current version ($currentVersion)"
            }
          }
          
          # Update version string
          $content = $content -replace '__version__ = "[^"]*"', "__version__ = `"$version`""
          
          # Update version info (Python dictionary format with spaces)
          $content = $content -replace '"major":\s*\d+,', "`"major`": $major,"
          $content = $content -replace '"minor":\s*\d+,', "`"minor`": $minor,"
          $content = $content -replace '"patch":\s*\d+,', "`"patch`": $patch,"
          
          # Verify changes were made
          if ($content -eq $originalContent) {
            echo "DEBUG: No changes detected. Checking if version is already correct..."
            
            # Check if the version is already correct
            $versionMatch = $content -match '__version__ = "([^"]*)"'
            
            if ($versionMatch) {
              $currentVersion = if ($content -match '__version__ = "([^"]*)"') { $matches[1] } else { "unknown" }
              
              if ($currentVersion -eq $version) {
                echo "Version is already correct: $version"
                echo "Skipping version update as no changes are needed."
              } else {
                Write-Error "No changes were made to version.py. Check regex patterns."
                exit 1
              }
            } else {
            Write-Error "No changes were made to version.py. Check regex patterns."
            exit 1
            }
          }
          
          Set-Content "version.py" -Value $content -Encoding UTF8
          echo "Successfully updated version.py"
          
          # Verify the update
          $updatedContent = Get-Content "version.py" -Raw -Encoding UTF8
          if ($updatedContent -match '__version__ = "([^"]*)"') {
            $detectedVersion = $matches[1]
            echo "Detected version in file: $detectedVersion"
            if ($detectedVersion -ne $version) {
              Write-Error "Version mismatch: expected $version, found $detectedVersion"
              exit 1
            }
          } else {
            Write-Error "Could not find version string in updated file"
            exit 1
          }
        } catch {
          Write-Error "Failed to update version.py: $_"
          exit 1
        }
        
    - name: Create .env.example
      run: |
        echo "# OpenAI API Configuration" > .env.example
        echo "OPENAI_API_KEY=your_api_key_here" >> .env.example
        
    - name: Build application (Standard)
      run: |
        # Use simplified CI build script
        echo "Starting CI build process..."
        python build_ci.py --optimize 1
        
    - name: Diagnose build failure
      if: failure()
      run: |
        echo "=== BUILD FAILURE DIAGNOSIS ==="
        echo "Build step failed. Collecting diagnostic information..."
        
        echo "=== Current directory contents ==="
        Get-ChildItem -Recurse | Format-Table Name, FullName, Length
        
        echo "=== Python environment ==="
        python --version
        pip list
        
        echo "=== System processes ==="
        Get-Process | Where-Object {$_.ProcessName -like "*python*" -or $_.ProcessName -like "*pip*"} | Format-Table
        
        echo "=== Event logs (last 10 application errors) ==="
        Get-EventLog -LogName Application -EntryType Error -Newest 10 | Format-Table TimeGenerated, Source, Message
        
        echo "=== Disk space ==="
        Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, Size, FreeSpace | Format-Table
        
        echo "=== Environment variables ==="
        Get-ChildItem Env: | Where-Object {$_.Name -like "*PYTHON*" -or $_.Name -like "*PATH*"} | Format-Table
        
        if (Test-Path "build") {
          echo "=== Build directory contents ==="
          Get-ChildItem "build" -Recurse | Format-Table Name, FullName, Length
        }
        
        if (Test-Path "dist") {
          echo "=== Dist directory contents ==="
          Get-ChildItem "dist" -Recurse | Format-Table Name, FullName, Length
        }
        
    - name: Verify builds
      run: |
        echo "=== Build Results ==="
        Get-ChildItem -Path "dist" -Recurse | Format-Table Name, Length, LastWriteTime
        
        # Test executable
        if (Test-Path "dist/GameTimeLimiter.exe") {
          echo "Standard build: OK"
          $size = (Get-Item "dist/GameTimeLimiter.exe").Length / 1MB
          echo "Size: $([math]::Round($size, 2)) MB"
        } else {
          echo "Standard build: FAILED"
          exit 1
        }
        
    - name: Create release notes
      id: release_notes
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $notes = @"
        # GameTimeLimiter v$version
        
        ## 📦 下载说明
        
        - **GameTimeLimiter.exe**: 单文件可执行程序，下载即用
        
        ## ✨ 主要功能
        
        - 🎮 游戏时间管理和限制
        - 📚 数学练习奖励系统
        - 🔒 防作弊机制
        - 📊 详细的使用统计
        - 🔄 自动更新功能
        
        ## 🚀 使用方法
        
        1. 下载对应版本的文件
        2. 创建 `.env` 文件并配置 OpenAI API 密钥（用于数学练习）
        3. 运行程序开始使用
        
        ## 📋 系统要求
        
        - Windows 10/11 (64位)
        - .NET Framework 4.7.2 或更高版本
        - 网络连接（用于更新检查和数学练习）
        
        ## 🔧 配置说明
        
        首次运行需要配置 OpenAI API 密钥：
        ```
        OPENAI_API_KEY=your_api_key_here
        ```
        
        ---
        
        如有问题请提交 Issue 或查看项目文档。
        "@
        
        # Save to file for upload
        Set-Content "release_notes.md" -Value $notes
        
        # Also output for GitHub
        $notes | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: GameTimeLimiter-Windows-v${{ steps.get_version.outputs.version }}
        path: |
          dist/GameTimeLimiter.exe
          .env.example
          README.md
          LICENSE
          
    - name: Debug GitHub Token and Permissions
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Ref name: ${{ github.ref_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Token length: ${{ secrets.GITHUB_TOKEN != '' }}"
          
    - name: Create Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: GameTimeLimiter ${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
        files: |
          dist/GameTimeLimiter.exe
          .env.example
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Manual Release
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: GameTimeLimiter ${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        draft: true  # Manual releases start as draft
        prerelease: false
        generate_release_notes: false
        make_latest: false
        files: |
          dist/GameTimeLimiter.exe
          .env.example
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 